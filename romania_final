## Importing relevant packages and data --------------------

library(easypackages)
packages("dplyr","foreach" ,"dplyr","rstatix", "data.table", "readxl", "readr", "stringr",
         "stringi", "openxlsx", "tidyr", "zoo", "ggplot2", "forcats","corrplot",
         "vroom", "foreign", "haven", "tidyverse", "purrr", "broom",
         "modEvA", "stargazer","nlme","sjPlot","sjmisc","sjlabelled", "cem", "gridExtra", "xtable", "writexl", "psych")

Sys.setenv(TZ = "GMT")
memory.limit(size = 30000)
gc()
setwd("C:/Users/s13476/OneDrive - Norges Handelsh√∏yskole/My papers/Paper 3/Data/") 

# Import the procurement data, filtering out only the variable we need. 
raw_ro1 <- fread(file = "RO_May21.csv", 
                 sep=",",
                 select = c("tender_id",
                            "tender_cpvs",
                            "tender_finalprice",
                            "buyer_city_original",
                            "buyer_buyertype",
                            "buyer_postcode",
                            "buyer_id",
                            "tender_publications_firstdcontra",
                            "bid_digiwhist_price",
                            "singleb",
                            "aw_date",
                            "lot_bidscount",
                            "cri_ro",
                            "buyer_nuts",
                            "bidder_nuts",
                            "tender_proceduretype",
                            "submp",
                            "notice_url"),
                 encoding='UTF-8')

#Import the enforcement data
enforcement_ro <- read_excel("enforcement_ro.xlsx")

#Overview of all the variables in the raw csv file. 
vartop <- read.csv("RO_May21.csv",nrows = 3,header=TRUE, sep=",")
vartop <- data.frame(vartop)

## Data processing and cleaning ------------------------------------------
names(raw_ro1)
Sys.setlocale(locale = "C")
raw_ro1$date_day<- as.Date(raw_ro1$aw_date, format= "%d%b%Y")

#Creating data frames 
enforcement_ro<-data.frame(enforcement_ro)
main_ro <- data.frame(raw_ro1)

#FILTERING 
#Filter out entries that don't have city name
main_ro <- main_ro %>% filter(!is.na(buyer_city_original))

#Filter missing in award date procurement
main_ro <- main_ro %>% filter(!is.na(date_day))

#Filter out contracts that are too small. The threshold is set at 130 000 RON which equal 26 000 EUR 
main_ro <- main_ro %>% filter(tender_finalprice > 26000)

#Filter out contracts from national institutions 
main_ro=main_ro%>%filter(!buyer_buyertype%in%c("NATIONAL_AUTHORITY","EUROPEAN_AGENCY", "NATIONAL_AGENCY"))

# all variable names in the enforcement data lower case
names(enforcement_ro) <- tolower(names(enforcement_ro))

#Filer cases before 2009 and after 2019 (we do not want entries influenced by corona)
main_ro <- main_ro %>% filter(tender_publications_firstdcontra < procurment_end)

#Fix formatting on municipality names
main_ro$buyer_city_original <- stri_trans_general(main_ro$buyer_city_original,id = "latin-ascii")

#Clean enforcement data names
enforcement_ro$municipality=enforcement_ro$municipality%>%
  tolower()%>% #To lower case
  str_remove_all(pattern = "comuna")%>% #Remove comuna string
  str_remove_all(pattern ="\\(.*\\)" )%>% #Remove comuna in parenthesis
  str_replace_all(pattern = "-",replacement = " ")%>% #Replace dashes by whitespace
  str_replace_all(pattern = "\\s+",replacement = " ") #Replace multiple whitespace by only one

# Political affiliation 

enforcement_ro = enforcement_ro %>%
  mutate(politics=case_when(
    political_party=="PSD"~0,
    political_party=="PNL"~1,
    political_party=="PDL"~1,
    political_party=="PC"~1,
    political_party=="PNG-CD"~1,
    political_party=="UNPR"~0,
    political_party=="USL"~0,
  )
  )

#Delete rows that correspond to the same case, so that one corruption case only occur once.
enforcement_ro <- distinct(enforcement_ro,nr_of_penal_decision, .keep_all=TRUE)
enforcement_ro_edited<-enforcement_ro
enforcement_ro_edited<-enforcement_ro_edited%>%select(municipality,date_of_indictment,politics)

#Filter out corruption cases that happened before 2009 (before we have procurement data)
procurment_start <- as.POSIXct("2009-01-01")
procurment_end <- as.POSIXct("2019-12-31")
enforcement_ro_edited <- enforcement_ro_edited %>% filter(date_of_indictment>=procurment_start)

#Defining dates.
enforcement_ro$date_of_definitive_sentencing <- as.POSIXct(enforcement_ro$date_of_definitive_sentencing, format='%Y/%m/%d') 
enforcement_ro$date_of_indictment <- as.POSIXct(enforcement_ro$date_of_indictment, format='%Y/%m/%d')  
main_ro$tender_publications_firstdcontra <-as.POSIXct(main_ro$tender_publications_firstdcontra, format='%Y/%m/%d')

#Collapse the enforcement data, so that each municipality have one row with all the corruption cases for that municipality. 
enforcement_ro_collapsed <- enforcement_ro_edited %>% 
  group_by_at(vars(municipality)) %>%
  summarize_all(paste, collapse=",") %>%
  separate(col= "date_of_indictment", into= c("case1","case2","case3","case4","case5","case6"), sep = ",")

enf_ro <- enforcement_ro_collapsed%>% select(municipality,case1,case2,case3)
enf_ro <- enf_ro[order(enf_ro$municipality),]
enf_ro$matched <- "Yes"
enf_ro$less10 <- "No"

print(xtable(enf_ro, type = "latex"), file = "municipalityfiltering.tex")

line<-unique(main_ro$municipality)
line<-as.data.frame(line)

#Dummy for treated municipalities 
treated_cities <- enforcement_ro_collapsed$municipality

##Extracting months and years for the procurement contracts
main_ro$contractyear<- ifelse(is.na(main_ro$tender_publications_firstdcontra), substring(main_ro$tender_publications_firstdcontra,1,4),substring(main_ro$tender_publications_firstdcontra,1,4)) #Contract year
main_ro$contractmonth <- ifelse(is.na(main_ro$tender_publications_firstdcontra), substring(main_ro$tender_publications_firstdcontra,6,7),substring(main_ro$tender_publications_firstdcontra,6,7)) #Contract month

#Generating month and year as date
main_ro$date <- as.yearmon(paste(main_ro$contractmonth, main_ro$contractyear), "%m %Y")

#Convert contract month and year to numeric to have a continuous variable
main_ro$contractmonth=as.numeric(main_ro$contractmonth) 
main_ro$contractyear=as.numeric(main_ro$contractyear)

#Calculate the log of the price
main_ro$log_price <- log(main_ro$tender_finalprice)

#Get the two first digit of postcode to have the state number
main_ro$region=substr(main_ro$buyer_postcode,start = 1,stop = 2)

#Fixing cities with multiple names
main_ro$buyer_city_original <- as.character(main_ro$buyer_city_original)
main_ro$buyer_city_original[main_ro$buyer_city_original == "Iasi (Iasi)"] <- "Iasi"
main_ro$buyer_city_original[main_ro$buyer_city_original == "DROBETA-TURNU SEVERIN"] <- "Drobeta-Turnu Severin"
main_ro$buyer_city_original[main_ro$buyer_city_original == "Marma<U+021B>iei"] <- "Sighetu Marmatiei"
main_ro$buyer_city_original[main_ro$buyer_city_original == "Mironeasas<U+00A0>"] <- "Mironeasa"
main_ro$buyer_city_original[main_ro$buyer_city_original == "Chiscani, jud. Braila"] <- "Chiscani"
main_ro$buyer_city_original[main_ro$buyer_city_original == "CaransebesP-ta Gen.Ioan Dragalina nr.2"] <- "Caransebes"
main_ro$buyer_city_original[main_ro$buyer_city_original == "Rosiori de Vede"] <- "Rosiorii de Vede"
main_ro$buyer_city_original[main_ro$buyer_city_original == "Sebe?, Lancram"] <- "Sebes, Lancram"
main_ro$buyer_city_original[main_ro$buyer_city_original == "suplacul d ebarcau"] <- "suplacu de barcau"

#Fixing city names in main_ro
main_ro$buyer_city_original=main_ro$buyer_city_original%>%
  tolower()%>%#to lower case
  str_remove_all(pattern = "comuna")%>%#Remove "comuna"
  str_remove_all(pattern ="\\(.*\\)" )%>%#Remove things between parenthesis
  str_replace_all(pattern = "-",replacement = " ")%>%
  str_replace_all(pattern = "-",replacement = " ")%>%#replace dashes by white space
  str_replace_all(pattern = "\\s+",replacement = " ")#replace multiple white space by only one

#Rename municipality variable to "municipality" in procurement data. 
main_ro=main_ro%>%rename(municipality=buyer_city_original)

#Combine the two data sets, enforcement and procurement.  
#Adds date of enforcement case to main_ro. It merge all columns based on the by= 
main_ro=merge(x = main_ro, y = enforcement_ro_collapsed, by = "municipality")

#Filter out Bucharest
main_ro=main_ro%>%filter(municipality!="bucuresti") 

#Filter cases before 2009
main_ro=main_ro%>%filter(contractyear>2008)

#Keeping a dataframe with all the corruption cases
main_ro_allcases <- main_ro

#Remove municipality with more than one case
#main_ro=main_ro%>%filter(is.na(case2))

## Creating variables--------------------------------

main_ro=main_ro%>%ungroup()%>% #Mutate add a new column
  mutate(corrupt_dummy=case_when( #A dummy indicating before and after the corruption case. 0 before, 1 after)
    date_day> case1~1,
    date_day< case1~0, 
  ),
  time_from_corrupted= as.Date(date_day)-as.Date(case1),#The difference between the date_day and the enforcement case1
  years_apart_corrupt=case_when(
    time_from_corrupted %between% c(0,365)~1,
    time_from_corrupted %between% c(365,2*365)~2,
    time_from_corrupted %between% c(2*365,3*365)~3,
    time_from_corrupted %between% c(-365,0)~-1,
    time_from_corrupted %between% c(-2*365,-365)~-2,
    time_from_corrupted %between% c(-3*365,-2*365)~-3,
  ),
  weeks_from_corrupted= floor(as.numeric(time_from_corrupted)/7
  ),
  months_from_corrupted =floor(round(as.numeric(time_from_corrupted)/356*12))
  
  )

#Remove contracts more than 3 years before or after the corruption case. 
main_ro <- main_ro %>% filter(!is.na(main_ro$years_apart_corrupt))

#Remove contracts that are more than 2 years before and after
#main_ro <- main_ro %>% filter(years_apart_corrupt %between% c(-3,3))

#Filter only cities with more than 10 cases
main_ro=main_ro%>%group_by(municipality)%>%filter(n()>10)

line<-unique(main_ro$municipality)
line<-as.data.frame(line)

main_ro$cri_ro <- as.numeric(main_ro$cri_ro)

#Take only first 2 number of cpv
main_ro$tender_cpvs=str_sub(string = main_ro$tender_cpvs,start = 1,end = 2)

#Create the true singlebid binary
main_ro$singlebid=NA
main_ro[which(main_ro$lot_bidscount==1),"singlebid"]=1
main_ro[which(main_ro$lot_bidscount>1),"singlebid"]=0

#Create a main city 2 letter post code
main_ro$buyer_postcode2=substr(main_ro$buyer_postcode,start = 1,stop = 2)#post code with 2 letter

#Creating the 2 and 3 letter buyer nuts
main_ro$buyer_nuts2=substr(main_ro$buyer_nuts,start = 1,stop = 2)#bidder nuts code with 2 letter
main_ro$buyer_nuts3=substr(main_ro$buyer_nuts,start = 1,stop = 3)#bidder nuts code with 3 letters
main_ro$buyer_nuts4=substr(main_ro$buyer_nuts,start = 1,stop = 4)#bidder nuts code with 4 letters
main_ro$buyer_nuts5=substr(main_ro$buyer_nuts,start = 1,stop = 5)#bidder nuts code with 5 letters

#Bidder nuts - for domestic vs. foreign bidders
main_ro$bidder_nuts2=substr(main_ro$bidder_nuts,start = 1,stop = 2)#bidder nuts code with 2 letter

window_length=30#Mean by 30 days
main_ro$time_from_corrupted=as.numeric(main_ro$time_from_corrupted)
main_ro$window=findInterval(x = main_ro$time_from_corrupted,
                            seq(min(main_ro$time_from_corrupted),max(main_ro$time_from_corrupted),
                                window_length))
meaned_main_ro<-main_ro%>%group_by(window)%>%
  summarise(mean_cri_ro=mean(cri_ro))
meaned_main_ro$window=(meaned_main_ro$window*window_length+window_length/2)+min(main_ro$time_from_corrupted)
meaned_main_ro=meaned_main_ro%>%rename(time_from_corrupted=window)

#main_ro<- main_ro %>% filter(case1 > "2009-06-17")
main_ro$domestic <- ifelse(main_ro$bidder_nuts2=="RO", "1", "0")
main_ro$contractmonth <- as.factor(main_ro$contractmonth)

options(scipen = 50)

#Number of cases before and after treatment   
cases_before <- main_ro%>% filter(corrupt_dummy== 0)
cases_after <- main_ro%>% filter(corrupt_dummy== 1)

#Cleaning ut the multiple entries in "politics"

main_ro=main_ro%>%
  mutate(politics1=case_when(
    grepl("1",politics)~1,
    grepl("0",politics)~0
    
  )
    
  )

main_ro$politics<-main_ro$politics1


#Dummy for when the left or right control national politics
main_ro=main_ro%>%
  mutate(politics_gov=case_when(
    date_day<"2012-05-06"~1,
    date_day> "2012-05-07"~0
  )
    
  )

## Creating binary variables for procedure type, submission periode, call for tenders--------------

#Create dummy for procedure and submission periode
main_ro <- main_ro %>% 
  mutate(procedure=case_when(
    tender_proceduretype == "NEGOTIATED_WITHOUT_PUBLICATION"~1,
    tender_proceduretype == "NEGOTIATED"~1,
    tender_proceduretype == "RESTRICTED"~1,
    tender_proceduretype == "OUTRIGHT_AWARD"~0,
    tender_proceduretype == "APPROACHING_BIDDERS"~0,
    tender_proceduretype == "COMPETITIVE_DIALOG"~0,
    tender_proceduretype == "NEGOTIATED_WITH_PUBLICATION"~0,
    tender_proceduretype == "OPEN"~0,
    tender_proceduretype == "DESIGN_CONTEST"~0,
    tender_proceduretype == "OTHER"~0
    ),
    submission=case_when(
      submp %between% c(2,32)~1,
      submp %between% c(33,365)~0
    )
    
  )
  
#Create dummy for call for tenders
main_ro$tendercall <- ifelse(grepl("ted", main_ro$notice_url), "0", "1")

  
## Descriptive statistics------------------

#Total amount of single bid contracts before and after treatment. 
contingency=main_ro%>%
  group_by(years_apart_corrupt, singlebid)%>%
  tally()%>%spread(singlebid,n)

#Overview of cities studies and the date of corruption
contingency=main_ro%>%
  group_by(municipality,case1,singlebid)%>%
  tally()%>%spread(singlebid,n)

contingency <- contingency%>% select(municipality,case1)
contingency <- contingency[order(as.Date(contingency$case1)),]

print(xtable(contingency, type = "latex"), file = "filename3.tex")

write_xlsx(contingency,"~/Downloads\\contingency.xlsx")

# Descriptive development of CRI - monthly mean 3 years before and after

window_length=30#Mean by 30 days
main_ro$time_from_corrupted=as.numeric(main_ro$time_from_corrupted)
main_ro$window=findInterval(x = main_ro$time_from_corrupted,
                            seq(min(main_ro$time_from_corrupted),max(main_ro$time_from_corrupted),
                                window_length))
meaned_main_ro<-main_ro%>%group_by(window)%>%
  summarise(mean_cri_ro=mean(cri_ro))
meaned_main_ro$window=(meaned_main_ro$window*window_length+window_length/2)+min(main_ro$time_from_corrupted)
meaned_main_ro=meaned_main_ro%>%rename(time_from_corrupted=window)
meaned_main_ro$month <- round(meaned_main_ro$time_from_corrupted/30)
#meaned_main_ro$week <- round(meaned_main_ro$time_from_corrupted/7)

p=ggplot(meaned_main_ro,
         aes(y=mean_cri_ro,x=month))+
  #geom_point(alpha=0,5)+
  labs(y= "CRI monthly mean", x = "Months before/after treatment")+
  geom_line(data = meaned_main_ro,aes(x=month,y=mean_cri_ro),color="red")+
  geom_vline(xintercept = 0,linetype=2, colour="blue")+
  theme_bw()
ggsave(plot = p,filename = "time_from_corrupted.png",width = 10,height = 8)

# Share of short submission time contracts
contingency=main_ro%>%
  group_by(years_apart_corrupt, submission)%>%
  tally()%>%spread(submission,n)

# Share of non open procedure contracts
contingency=main_ro%>%
  group_by(years_apart_corrupt, procedure)%>%
  tally()%>%spread(procedure,n)

# Share of no tender call contracts
contingency=main_ro%>%
  group_by(years_apart_corrupt, tendercall)%>%
  tally()%>%spread(tendercall,n)


## T-test CRI unmatched 1,2,3y---------------
pre_3y <- main_ro%>% filter(years_apart_corrupt==-3|years_apart_corrupt==-2|years_apart_corrupt==-1)
pre_2y <- main_ro%>% filter(years_apart_corrupt==-2|years_apart_corrupt==-1)
pre_1y <- main_ro%>% filter(years_apart_corrupt==-1)

post_3y <- main_ro%>% filter(years_apart_corrupt==3|years_apart_corrupt==2|years_apart_corrupt==1)
post_2y <- main_ro%>% filter(years_apart_corrupt==2|years_apart_corrupt==1)
post_1y <- main_ro%>% filter(years_apart_corrupt==1)

#mean before - mean after t-test
#m3_c<-t.test(pre_3y$cri_ro,post_3y$cri_ro, conf.level = 0.95) 
#m2_c<-t.test(pre_2y$cri_ro,post_2y$cri_ro, conf.level = 0.95)
#m1_c<-t.test(pre_1y$cri_ro,post_1y$cri_ro, conf.level = 0.95)

#Mean after - mean before t-test
m3_c<-t.test(post_3y$cri_ro,pre_3y$cri_ro, conf.level = 0.95)
m2_c<-t.test(post_2y$cri_ro,pre_2y$cri_ro, conf.level = 0.95)
m1_c<-t.test(post_1y$cri_ro,pre_1y$cri_ro, conf.level = 0.95)


tab1<-map_df(list(m1_c,m2_c,m3_c), tidy)
tab1[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]

## T-test SB unmatched 1,2,3y----------------

dfsinglebid=main_ro%>%
  group_by(months_from_corrupted,singlebid)%>%
  tally()%>%#Count singlebid by months
  filter(!is.na(singlebid))%>%#Remove NA
  pivot_wider(names_from = singlebid,values_from = n)%>%# Long to wide the singlebid for better mathematical handling
  rename(not_single_bid="FALSE",single_bid="TRUE")%>%rowwise()%>%#Rename to make it clearer
  mutate(sample_size=sum(not_single_bid+single_bid,na.rm = T),#Get sample size for each months
         ratio_singleb=single_bid/sample_size)#%>%# Calculate the ratio of single bid contracts

pre_3y <- dfsinglebid[2:37,]
pre_2y <- dfsinglebid[14:37,]
pre_1y <- dfsinglebid[26:37,]

post_3y <- dfsinglebid[38:50,]
post_2y <- dfsinglebid[38:62,]
post_1y <- dfsinglebid[38:74,]

#Before - after test
#m3_s<-t.test(pre_3y$ratio_singleb,post_3y$ratio_singleb, conf.level = 0.95)
#m2_s<-t.test(pre_2y$ratio_singleb,post_2y$ratio_singleb, conf.level = 0.95)
#m1_s<-t.test(pre_1y$ratio_singleb,post_1y$ratio_singleb, conf.level = 0.95)

#After-before test
m3_s<-t.test(post_3y$ratio_singleb,pre_3y$ratio_singleb, conf.level = 0.95)
m2_s<-t.test(post_2y$ratio_singleb,pre_2y$ratio_singleb, conf.level = 0.95)
m1_s<-t.test(post_1y$ratio_singleb,pre_1y$ratio_singleb, conf.level = 0.95)
m3_s

tab2<-map_df(list(m1_s,m2_s,m3_s), tidy)
tab2[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]

## T-test procedure type unmatched-------------
dfprocedure=main_ro%>%
  group_by(months_from_corrupted,procedure)%>%
  tally()%>%#Count singlebid by months
  filter(!is.na(procedure))%>%#Remove NA
  pivot_wider(names_from = procedure,values_from = n)%>%# Long to wide the singlebid for better mathematical handling
  rename(risky_procedure="1",not_risky_procedure="0")%>%rowwise()%>%#Rename to make it clearer
  mutate(sample_size=sum(risky_procedure+not_risky_procedure,na.rm = T),#Get sample size for each months
         ratio_procedure=risky_procedure/sample_size)#%>%# Calculate the ratio of single bid contracts

pre_3y <- dfprocedure[2:37,]
pre_2y <- dfprocedure[14:37,]
pre_1y <- dfprocedure[26:37,]

post_3y <- dfprocedure[38:50,]
post_2y <- dfprocedure[38:62,]
post_1y <- dfprocedure[38:74,]

#Before - after test
#m3_s<-t.test(pre_3y$ratio_singleb,post_3y$ratio_singleb, conf.level = 0.95)
#m2_s<-t.test(pre_2y$ratio_singleb,post_2y$ratio_singleb, conf.level = 0.95)
#m1_s<-t.test(pre_1y$ratio_singleb,post_1y$ratio_singleb, conf.level = 0.95)

#After-before test
m3_s<-t.test(post_3y$ratio_procedure,pre_3y$ratio_procedure, conf.level = 0.95)
m2_s<-t.test(post_2y$ratio_procedure,pre_2y$ratio_procedure, conf.level = 0.95)
m1_s<-t.test(post_1y$ratio_procedure,pre_1y$ratio_procedure, conf.level = 0.95)
m3_s

tab2<-map_df(list(m1_s,m2_s,m3_s), tidy)
tab2[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]

## T-test submission period unmatched-------------
dfsubmission=main_ro%>%
  group_by(months_from_corrupted,submission)%>%
  tally()%>%#Count singlebid by months
  filter(!is.na(submission))%>%#Remove NA
  pivot_wider(names_from = submission,values_from = n)%>%# Long to wide the singlebid for better mathematical handling
  rename(short_submission="1",long_submission="0")%>%rowwise()%>%#Rename to make it clearer
  mutate(sample_size=sum(short_submission+long_submission,na.rm = T),#Get sample size for each months
         ratio_submission=short_submission/sample_size)#%>%# Calculate the ratio of single bid contracts

pre_3y <- dfsubmission[2:37,]
pre_2y <- dfsubmission[14:37,]
pre_1y <- dfsubmission[26:37,]

post_3y <- dfsubmission[38:50,]
post_2y <- dfsubmission[38:62,]
post_1y <- dfsubmission[38:74,]

#Before - after test
#m3_s<-t.test(pre_3y$ratio_singleb,post_3y$ratio_singleb, conf.level = 0.95)
#m2_s<-t.test(pre_2y$ratio_singleb,post_2y$ratio_singleb, conf.level = 0.95)
#m1_s<-t.test(pre_1y$ratio_singleb,post_1y$ratio_singleb, conf.level = 0.95)

#After-before test
m3_s<-t.test(post_3y$ratio_submission,pre_3y$ratio_submission, conf.level = 0.95)
m2_s<-t.test(post_2y$ratio_submission,pre_2y$ratio_submission, conf.level = 0.95)
m1_s<-t.test(post_1y$ratio_submission,pre_1y$ratio_submission, conf.level = 0.95)
m3_s

tab2<-map_df(list(m1_s,m2_s,m3_s), tidy)
tab2[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]

## T-test tender call unmatched-------------
dftendercall=main_ro%>%
  group_by(months_from_corrupted,tendercall)%>%
  tally()%>%#Count singlebid by months
  filter(!is.na(tendercall))%>%#Remove NA
  pivot_wider(names_from = tendercall,values_from = n)%>%# Long to wide the singlebid for better mathematical handling
  rename(no_tendercall="1",tendercall="0")%>%rowwise()%>%#Rename to make it clearer
  mutate(sample_size=sum(no_tendercall+tendercall,na.rm = T),#Get sample size for each months
         ratio_tendercall=no_tendercall/sample_size)#%>%# Calculate the ratio of single bid contracts

pre_3y <- dftendercall[2:37,]
pre_2y <- dftendercall[14:37,]
pre_1y <- dftendercall[26:37,]

post_3y <- dftendercall[38:50,]
post_2y <- dftendercall[38:62,]
post_1y <- dftendercall[38:74,]

#Before - after test
#m3_s<-t.test(pre_3y$ratio_singleb,post_3y$ratio_singleb, conf.level = 0.95)
#m2_s<-t.test(pre_2y$ratio_singleb,post_2y$ratio_singleb, conf.level = 0.95)
#m1_s<-t.test(pre_1y$ratio_singleb,post_1y$ratio_singleb, conf.level = 0.95)

#After-before test
m3_s<-t.test(post_3y$ratio_tendercall,pre_3y$ratio_tendercall, conf.level = 0.95)
m2_s<-t.test(post_2y$ratio_tendercall,pre_2y$ratio_tendercall, conf.level = 0.95)
m1_s<-t.test(post_1y$ratio_tendercall,pre_1y$ratio_tendercall, conf.level = 0.95)
m3_s

tab2<-map_df(list(m1_s,m2_s,m3_s), tidy)
tab2[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]
main_ro$tendercall <- as.numeric(main_ro$tendercall)

## Matching (CEM) CRI-----------

#Preparing the data frame
main_ro_matching=main_ro%>%select(tender_id, domestic, time_from_corrupted, contractyear, contractmonth,cri_ro,tender_cpvs,log_price,buyer_buyertype,corrupt_dummy,years_apart_corrupt,buyer_nuts4,buyer_postcode2, municipality)

#Cleaning 
main_ro_matching<- data.frame(na.omit(main_ro_matching))
main_ro_matching<-main_ro_matching %>% filter(!is.na(cri_ro))

var1<-c("cri_ro","log_price")
var2<-c("cri_ro", "tender_id", "years_apart_corrupt", "domestic", "time_from_corrupted", "contractyear", "buyer_nuts4", "municipality"  )

#imbalance(group=main_ro_matching$cri_ro, data=main_ro_matching[var1])
summary(main_ro_matching$log_price)
#Value cuts based on quartile
valuecuts1_0 = c(12.54,13.86,15.09)

#Variable grouping
buyer_buyerType.grp<-list(c("REGIONAL_AUTHORITY", "REGIONAL_AGENCY", "UTILITIES"),c("OTHER"), c("PUBLIC_BODY"), c("NA",NA))

#Compute the coarsened exact matching
mat1_0 <- cem(treatment = "corrupt_dummy",drop = var2, grouping = list(buyer_buyertype= buyer_buyerType.grp), cutpoints = list(log_price=valuecuts1_0), eval.imbalance = F,data = main_ro_matching)
table(mat1_0$matched)

main_ro_matching$aftermatchtreat <- mat1_0$matched
main_ro_matching$aftermatchweight <- mat1_0$w

#Filter out unmatched
main_ro_matching_final <- main_ro_matching %>% filter(aftermatchtreat == TRUE)


## T-test CRI matched 1,2,3y ------------------
match_pre_1 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == 1)
match_post_1 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == 1)

match_pre_2 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == 1 | years_apart_corrupt == 2)
match_post_2 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == 1 | years_apart_corrupt == 2 )

match_pre_3 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == -3 | years_apart_corrupt == 1 | years_apart_corrupt == 2 | years_apart_corrupt == 3)
match_post_3 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == -3 | years_apart_corrupt == 1 | years_apart_corrupt == 2 | years_apart_corrupt == 3 )

# mean after - mean before 1,2 and 3 years
matched_comp_cri_1 <- t.test( match_post_1$cri_ro,match_pre_1$cri_ro, paired = FALSE, conf.level =0.95)
matched_comp_cri_1

matched_comp_cri_2 <- t.test( match_post_2$cri_ro,match_pre_2$cri_ro, paired = FALSE, conf.level =0.95)
matched_comp_cri_2

matched_comp_cri_3 <- t.test( match_post_3$cri_ro,match_pre_3$cri_ro, paired = FALSE, conf.level =0.95)
matched_comp_cri_3

tab<-map_df(list(matched_comp_cri_1,matched_comp_cri_2,matched_comp_cri_3), tidy)
tab[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]

## Matching (CEM) SB ------------------------------------

#data preparation
main_ro$contractmonth <- as.factor(main_ro$contractmonth)
main_ro$singleb [is.na(main_ro$singleb)] = 0

#Matching of the treated group of contracts with the non-treated group, creating a control group. 
main_ro_matching=main_ro%>%select(tender_id, domestic, time_from_corrupted, contractyear, contractmonth, singleb, tender_cpvs,log_price,buyer_buyertype,corrupt_dummy,years_apart_corrupt,municipality,buyer_nuts4,buyer_postcode2)

#Cleaning
main_ro_matching<- data.frame(na.omit(main_ro_matching))
main_ro_matching<-main_ro_matching %>% filter(!is.na(singleb))

#Defining groups of variables
var1<-c("singleb","log_price")
var2<-c("singleb", "tender_id", "years_apart_corrupt", "domestic", "time_from_corrupted", "contractyear", "buyer_nuts4","buyer_postcode2")

#imbalance(group=main_ro_matching$singlebid, data=main_ro_matching[var1])
summary(main_ro_matching$log_price)

#Value cuts based on quartile
valuecuts1_0 = c(12.54,13.86,15.09)

#Variable grouping
buyer_buyerType.grp<-list(c("REGIONAL_AUTHORITY", "REGIONAL_AGENCY", "UTILITIES"),c("OTHER"), c("PUBLIC_BODY"), c("NA",NA))

#Compute the coarsened exact matching
mat1_0 <- cem(treatment = "corrupt_dummy",drop = var2, grouping = list(buyer_buyertype= buyer_buyerType.grp),cutpoints = list(log_price=valuecuts1_0), eval.imbalance = F,data = main_ro_matching)
table(mat1_0$matched)

main_ro_matching$aftermatchtreat <- mat1_0$matched
main_ro_matching$aftermatchweight <- mat1_0$w

#Filter out unmatched
main_ro_matching_final <- main_ro_matching %>% filter(aftermatchtreat == TRUE)

## T-test SB matched 1,2,3y ------------------
match_pre_1 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == 1)
match_post_1 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == 1)

match_pre_2 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == 1 | years_apart_corrupt == 2)
match_post_2 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == 1 | years_apart_corrupt == 2 )

match_pre_3 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == -3 | years_apart_corrupt == 1 | years_apart_corrupt == 2 | years_apart_corrupt == 3)
match_post_3 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == -3 | years_apart_corrupt == 1 | years_apart_corrupt == 2 | years_apart_corrupt == 3 )

# mean after - mean before 1,2 and 3 years
matched_comp_sb_1 <- t.test( match_post_1$singleb,match_pre_1$singleb, paired = FALSE, conf.level =0.95)
matched_comp_sb_1

matched_comp_sb_2 <- t.test( match_post_2$singleb,match_pre_2$singleb, paired = FALSE, conf.level =0.95)
matched_comp_sb_2

matched_comp_sb_3 <- t.test( match_post_3$singleb,match_pre_3$singleb, paired = FALSE, conf.level =0.95)
matched_comp_sb_3

tab<-map_df(list(matched_comp_sb_1,matched_comp_sb_2,matched_comp_sb_3), tidy)
tab[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]

## Matching (CEM) procedure type ------------------------------------

#data preparation
main_ro$contractmonth <- as.factor(main_ro$contractmonth)
main_ro$procedure [is.na(main_ro$procedure)] = 0

#Matching of the treated group of contracts with the non-treated group, creating a control group. 
main_ro_matching=main_ro%>%select(tender_id, domestic, time_from_corrupted, contractyear, contractmonth, procedure, tender_cpvs,log_price,buyer_buyertype,corrupt_dummy,years_apart_corrupt,municipality,buyer_nuts4,buyer_postcode2)

#Cleaning
main_ro_matching<- data.frame(na.omit(main_ro_matching))
main_ro_matching<-main_ro_matching %>% filter(!is.na(procedure))

#Defining groups of variables
var1<-c("procedure","log_price")
var2<-c("procedure", "tender_id", "years_apart_corrupt", "domestic", "time_from_corrupted", "contractyear", "buyer_nuts4","buyer_postcode2")

#imbalance(group=main_ro_matching$singlebid, data=main_ro_matching[var1])
summary(main_ro_matching$log_price)

#Value cuts based on quartile
valuecuts1_0 = c(12.54,13.86,15.09)

#Variable grouping
buyer_buyerType.grp<-list(c("REGIONAL_AUTHORITY", "REGIONAL_AGENCY", "UTILITIES"),c("OTHER"), c("PUBLIC_BODY"), c("NA",NA))

#Compute the coarsened exact matching
mat1_0 <- cem(treatment = "corrupt_dummy",drop = var2, grouping = list(buyer_buyertype= buyer_buyerType.grp),cutpoints = list(log_price=valuecuts1_0), eval.imbalance = F,data = main_ro_matching)
table(mat1_0$matched)

main_ro_matching$aftermatchtreat <- mat1_0$matched
main_ro_matching$aftermatchweight <- mat1_0$w

#Filter out unmatched
main_ro_matching_final <- main_ro_matching %>% filter(aftermatchtreat == TRUE)
main_ro_matching_final$procedure <- as.numeric(main_ro_matching_final$procedure)

## T-test procedure matched 1,2,3y ------------------
match_pre_1 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == 1)
match_post_1 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == 1)

match_pre_2 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == 1 | years_apart_corrupt == 2)
match_post_2 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == 1 | years_apart_corrupt == 2 )

match_pre_3 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == -3 | years_apart_corrupt == 1 | years_apart_corrupt == 2 | years_apart_corrupt == 3)
match_post_3 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == -3 | years_apart_corrupt == 1 | years_apart_corrupt == 2 | years_apart_corrupt == 3 )

# mean after - mean before 1,2 and 3 years
matched_comp_sb_1 <- t.test( match_post_1$procedure,match_pre_1$procedure, paired = FALSE, conf.level =0.95)
matched_comp_sb_1

matched_comp_sb_2 <- t.test( match_post_2$procedure,match_pre_2$procedure, paired = FALSE, conf.level =0.95)
matched_comp_sb_2

matched_comp_sb_3 <- t.test( match_post_3$procedure,match_pre_3$procedure, paired = FALSE, conf.level =0.95)
matched_comp_sb_3

tab<-map_df(list(matched_comp_sb_1,matched_comp_sb_2,matched_comp_sb_3), tidy)
tab[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]

## Matching (CEM) submission ------------------------------------

#data preparation
main_ro$contractmonth <- as.factor(main_ro$contractmonth)
main_ro$submission [is.na(main_ro$submission)] = 0

#Matching of the treated group of contracts with the non-treated group, creating a control group. 
main_ro_matching=main_ro%>%select(tender_id, domestic, time_from_corrupted, contractyear, contractmonth, submission, tender_cpvs,log_price,buyer_buyertype,corrupt_dummy,years_apart_corrupt,municipality,buyer_nuts4,buyer_postcode2)

#Cleaning
main_ro_matching<- data.frame(na.omit(main_ro_matching))
main_ro_matching<-main_ro_matching %>% filter(!is.na(submission))

#Defining groups of variables
var1<-c("submission","log_price")
var2<-c("submission", "tender_id", "years_apart_corrupt", "domestic", "time_from_corrupted", "contractyear", "buyer_nuts4","buyer_postcode2")

#imbalance(group=main_ro_matching$singlebid, data=main_ro_matching[var1])
summary(main_ro_matching$log_price)

#Value cuts based on quartile
valuecuts1_0 = c(12.54,13.86,15.09)

#Variable grouping
buyer_buyerType.grp<-list(c("REGIONAL_AUTHORITY", "REGIONAL_AGENCY", "UTILITIES"),c("OTHER"), c("PUBLIC_BODY"), c("NA",NA))

#Compute the coarsened exact matching
mat1_0 <- cem(treatment = "corrupt_dummy",drop = var2, grouping = list(buyer_buyertype= buyer_buyerType.grp),cutpoints = list(log_price=valuecuts1_0), eval.imbalance = F,data = main_ro_matching)
table(mat1_0$matched)

main_ro_matching$aftermatchtreat <- mat1_0$matched
main_ro_matching$aftermatchweight <- mat1_0$w

#Filter out unmatched
main_ro_matching_final <- main_ro_matching %>% filter(aftermatchtreat == TRUE)
main_ro_matching_final$submission <- as.numeric(main_ro_matching_final$submission)

## T-test submission matched 1,2,3y ------------------
match_pre_1 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == 1)
match_post_1 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == 1)

match_pre_2 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == 1 | years_apart_corrupt == 2)
match_post_2 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == 1 | years_apart_corrupt == 2 )

match_pre_3 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == -3 | years_apart_corrupt == 1 | years_apart_corrupt == 2 | years_apart_corrupt == 3)
match_post_3 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == -3 | years_apart_corrupt == 1 | years_apart_corrupt == 2 | years_apart_corrupt == 3 )

# mean after - mean before 1,2 and 3 years
matched_comp_sb_1 <- t.test( match_post_1$submission,match_pre_1$submission, paired = FALSE, conf.level =0.95)
matched_comp_sb_1

matched_comp_sb_2 <- t.test( match_post_2$submission,match_pre_2$submission, paired = FALSE, conf.level =0.95)
matched_comp_sb_2

matched_comp_sb_3 <- t.test( match_post_3$submission,match_pre_3$submission, paired = FALSE, conf.level =0.95)
matched_comp_sb_3

tab<-map_df(list(matched_comp_sb_1,matched_comp_sb_2,matched_comp_sb_3), tidy)
tab[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]

## Matching (CEM) tendercall ------------------------------------

#data preparation
main_ro$contractmonth <- as.factor(main_ro$contractmonth)
main_ro$tendercall [is.na(main_ro$tendercall)] = 0

#Matching of the treated group of contracts with the non-treated group, creating a control group. 
main_ro_matching=main_ro%>%select(tender_id, domestic, time_from_corrupted, contractyear, contractmonth, tendercall, tender_cpvs,log_price,buyer_buyertype,corrupt_dummy,years_apart_corrupt,municipality,buyer_nuts4,buyer_postcode2)

#Cleaning
main_ro_matching<- data.frame(na.omit(main_ro_matching))
main_ro_matching<-main_ro_matching %>% filter(!is.na(tendercall))

#Defining groups of variables
var1<-c("tendercall","log_price")
var2<-c("tendercall", "tender_id", "years_apart_corrupt", "domestic", "time_from_corrupted", "contractyear", "buyer_nuts4","buyer_postcode2")

#imbalance(group=main_ro_matching$singlebid, data=main_ro_matching[var1])
summary(main_ro_matching$log_price)

#Value cuts based on quartile
valuecuts1_0 = c(12.54,13.86,15.09)

#Variable grouping
buyer_buyerType.grp<-list(c("REGIONAL_AUTHORITY", "REGIONAL_AGENCY", "UTILITIES"),c("OTHER"), c("PUBLIC_BODY"), c("NA",NA))

#Compute the coarsened exact matching
mat1_0 <- cem(treatment = "corrupt_dummy",drop = var2, grouping = list(buyer_buyertype= buyer_buyerType.grp),cutpoints = list(log_price=valuecuts1_0), eval.imbalance = F,data = main_ro_matching)
table(mat1_0$matched)

main_ro_matching$aftermatchtreat <- mat1_0$matched
main_ro_matching$aftermatchweight <- mat1_0$w

#Filter out unmatched
main_ro_matching_final <- main_ro_matching %>% filter(aftermatchtreat == TRUE)
main_ro_matching_final$tendercall <- as.numeric(main_ro_matching_final$tendercall)

## T-test tendercall matched 1,2,3y ------------------
match_pre_1 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == 1)
match_post_1 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == 1)

match_pre_2 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == 1 | years_apart_corrupt == 2)
match_post_2 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == 1 | years_apart_corrupt == 2 )

match_pre_3 <- main_ro_matching_final %>% filter(corrupt_dummy == 0 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == -3 | years_apart_corrupt == 1 | years_apart_corrupt == 2 | years_apart_corrupt == 3)
match_post_3 <- main_ro_matching_final %>% filter(corrupt_dummy == 1 & years_apart_corrupt == -1 | years_apart_corrupt == -2 | years_apart_corrupt == -3 | years_apart_corrupt == 1 | years_apart_corrupt == 2 | years_apart_corrupt == 3 )

# mean after - mean before 1,2 and 3 years
matched_comp_sb_1 <- t.test( match_post_1$tendercall,match_pre_1$tendercall, paired = FALSE, conf.level =0.95)
matched_comp_sb_1

matched_comp_sb_2 <- t.test( match_post_2$tendercall,match_pre_2$tendercall, paired = FALSE, conf.level =0.95)
matched_comp_sb_2

matched_comp_sb_3 <- t.test( match_post_3$tendercall,match_pre_3$tendercall, paired = FALSE, conf.level =0.95)
matched_comp_sb_3

tab<-map_df(list(matched_comp_sb_1,matched_comp_sb_2,matched_comp_sb_3), tidy)
tab[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]

## Creating variables for cities with 2 and 3 corruption cases -------------------

#Filter only cities with more than 10 cases
main_ro_allcases=main_ro_allcases%>%group_by(municipality)%>%filter(n()>10)

#Filter cases before 2009-06-17
main_ro_allcases<- main_ro_allcases %>% filter(case1 > "2009-06-17")

#preparing data set for regressions later
main_ro_allcases$bidder_nuts2=substr(main_ro_allcases$bidder_nuts,start = 1,stop = 2)#bidder nuts code with 2 letter
main_ro_allcases$buyer_nuts4=substr(main_ro_allcases$buyer_nuts,start = 1,stop = 4)#buyer nuts code with 4 letter
main_ro_allcases$domestic <- ifelse(main_ro_allcases$bidder_nuts2=="RO", "1", "0")
main_ro_allcases$contractmonth <- as.factor(main_ro_allcases$contractmonth)

#Take only first 2 number of cpv
main_ro_allcases$tender_cpvs=str_sub(string = main_ro_allcases$tender_cpvs,start = 1,end = 2)

#Case 1 dummy + time before/after corruption case
main_ro_allcases=main_ro_allcases%>%ungroup()%>% #Mutate add a new column
  mutate(corrupt_dummy=case_when( #A dummy indicating before and after the corruption case. 0 before, 1 after)
    date_day> case1~1,
    date_day< case1~0, 
  ),
  time_from_corrupted= as.Date(date_day)-as.Date(case1),#The difference between the date_day and the enforcement case1
  years_apart_corrupt=case_when(
    time_from_corrupted %between% c(0,365)~1,
    time_from_corrupted %between% c(365,2*365)~2,
    time_from_corrupted %between% c(2*365,3*365)~3,
    time_from_corrupted %between% c(-365,0)~-1,
    time_from_corrupted %between% c(-2*365,-365)~-2,
    time_from_corrupted %between% c(-3*365,-2*365)~-3,
  ),
  months_apart_corrupt=floor(round(as.numeric(time_from_corrupted)/356*12))
  )

#Case 2 dummy + time before/after corruption case
main_ro_allcases=main_ro_allcases%>%ungroup()%>% #Mutate add a new column
  mutate(corrupt_dummy_case2=case_when( #A dummy indicating before and after the corruption case . 0 before, 1 after)
    date_day> case2~1,
    date_day< case2~0, 
  ),
  time_from_corrupted_case2= as.Date(date_day)-as.Date(case2),#The difference between the date_day and the enforcement case2
  years_apart_corrupt_case2=case_when(
    time_from_corrupted_case2 %between% c(0,365)~1,
    time_from_corrupted_case2 %between% c(365,2*365)~2,
    time_from_corrupted_case2 %between% c(2*365,3*365)~3,
    time_from_corrupted_case2 %between% c(-365,0)~-1,
    time_from_corrupted_case2 %between% c(-2*365,-365)~-2,
    time_from_corrupted_case2 %between% c(-3*365,-2*365)~-3,
  ),
  months_apart_corrupt_case2=floor(round(as.numeric(time_from_corrupted_case2)/356*12))
  )
  
#Case 3 dummy + time before/after corruption case
main_ro_allcases=main_ro_allcases%>%ungroup()%>% #Mutate add a new column
  mutate(corrupt_dummy_case3=case_when( #A dummy indicating before and after the corruption case . 0 before, 1 after)
    date_day> case3~1,
    date_day< case3~0, 
  ),
  time_from_corrupted_case3= as.Date(date_day)-as.Date(case3),#The difference between the date_day and the enforcement case3
  years_apart_corrupt_case3=case_when(
    time_from_corrupted_case3 %between% c(0,365)~1,
    time_from_corrupted_case3 %between% c(365,2*365)~2,
    time_from_corrupted_case3 %between% c(2*365,3*365)~3,
    time_from_corrupted_case3 %between% c(-365,0)~-1,
    time_from_corrupted_case3 %between% c(-2*365,-365)~-2,
    time_from_corrupted_case3 %between% c(-3*365,-2*365)~-3,
  ),
  months_apart_corrupt_case3=floor(round(as.numeric(time_from_corrupted_case3)/356*12))
  )

#Factor variable 0= before first treatment 1= while treatment 2= after last treatment 
main_ro_allcases=main_ro_allcases%>%ungroup()%>% #Mutate add a new column
  mutate(corrupt_factor=case_when(
    (date_day< case1 & !(is.na(case1)) & is.na(case2) & is.na(case3)) ~ 0,
    (date_day> case1 & !(is.na(case1)) & is.na(case2) & is.na(case3)) ~2,
    
    (date_day< case1 & !(is.na(case1)) & !(is.na(case2)) & is.na(case3)) ~ 0,
    (date_day> case1 & date_day<case2 & !(is.na(case1)) & !(is.na(case2))& is.na(case3)) ~ 1,
    (date_day> case2 & !(is.na(case1)) & !(is.na(case2)) & is.na(case3)) ~ 2, 
    
    (date_day< case1 & !(is.na(case1)) & !(is.na(case2)) & !(is.na(case3))) ~ 0,
    (date_day> case1 & date_day<case3 & !(is.na(case1)) & !(is.na(case2)) & !(is.na(case3))) ~ 1,
    (date_day> case3 & !(is.na(case1)) & !(is.na(case2)) & !(is.na(case3))) ~2,
  ))

main_ro_allcases$corrupt_factor <- as.factor(main_ro_allcases$corrupt_factor)

#Filter only cities with more than 10 cases
main_ro_allcases=main_ro_allcases%>%group_by(municipality)%>%filter(n()>10)

#Overview of cities studies and the date of corruption
contingency=main_ro_allcases%>%
  group_by(municipality,case1,case2,case3,singleb)%>%
  tally()%>%spread(singleb,n)

contingency <- contingency%>% select(municipality,case1,case2,case3)
contingency <- contingency[order(as.Date(contingency$case1)),]

print(xtable(contingency, type = "latex"), file = "filename3.tex")

## Preparation for analysis including cities with 2 and 3 cases---------

#Create dummies for cities that have a distance in time between case 1 and 2 of 1,2 and 3 years apart. 
main_ro_allcases <- main_ro_allcases %>% ungroup() %>%
  mutate(time_between_case1_case2 = as.Date(case2)-as.Date(case1),
         case_apart1y=case_when(
           time_between_case1_case2 %between% c(-365,365)~0,
           time_between_case1_case2 < -365~1,
           time_between_case1_case2 > 365~1,
         ),
         case_apart2y=case_when(
           time_between_case1_case2 %between% c(2*-365,2*365)~0,
           time_between_case1_case2 < 2*-365~1,
           time_between_case1_case2 > 2*365~1,
         ),
         case_apart3y=case_when(
           time_between_case1_case2 %between% c(3*-365,3*365)~0,
           time_between_case1_case2 < 3*-365~1,
           time_between_case1_case2 > 3*365~1,
         ),
    
  )
main_ro_allcases <- main_ro_allcases %>% ungroup() %>%
  mutate(time_between_case2_case3 = as.Date(case3)-as.Date(case2),
         case_apart1y_case2n3=case_when(
           time_between_case2_case3 %between% c(-365,365)~0,
           time_between_case2_case3 < -365~1,
           time_between_case2_case3 > 365~1,
         ),
         case_apart2y_case2n3=case_when(
           time_between_case2_case3 %between% c(2*-365,2*365)~0,
           time_between_case2_case3 < 2*-365~1,
           time_between_case2_case3 > 2*365~1,
         ),
         case_apart3y_case2n3=case_when(
           time_between_case2_case3 %between% c(3*-365,3*365)~0,
           time_between_case2_case3 < 3*-365~1,
           time_between_case2_case3 > 3*365~1,
         ),
         
  )

## T-test CRI 1,2 and 3years including 2 and 3 cases-----------

#Filtering out all cases that either have 1 corruption case, 2 cases with minimum 1 year between case1 and case2,
#or three cases with minimum 1 year between case2 and case3 
main_ro_allcases1 <- main_ro_allcases%>%
  filter(case_apart1y==1 | case_apart1y_case2n3==1)

temp <- main_ro_allcases%>%filter(is.na(case2))

main_ro_allcases1 <- rbind(main_ro_allcases1, temp)

#1 year before/after treatment  
pre_1y <- main_ro_allcases1%>% filter(years_apart_corrupt==-1 | years_apart_corrupt_case2==-1 | years_apart_corrupt_case3==-1)
post_1y <- main_ro_allcases1%>% filter(years_apart_corrupt==1 | years_apart_corrupt_case2==1 | years_apart_corrupt_case3==1)

#Mean after - mean before t-test
m1_c<-t.test(post_1y$cri_ro,pre_1y$cri_ro, conf.level = 0.95)

#Filtering out all cases that either have 1 corruption case, 2 cases with minimum 2 year between case1 and case2,
#or three cases with minimum 2 year between case2 and case3 
main_ro_allcases1 <- main_ro_allcases%>%
  filter(case_apart2y==1 | case_apart2y_case2n3==1)

temp <- main_ro_allcases%>%filter(is.na(case2))

main_ro_allcases1 <- rbind(main_ro_allcases1, temp)

#2 years before/after treatment
pre_2y <- main_ro_allcases1%>% filter(years_apart_corrupt==-1 
                                      |years_apart_corrupt==-2
                                      |years_apart_corrupt_case2==-1
                                      |years_apart_corrupt_case2==-2
                                      |years_apart_corrupt_case3==-1
                                      |years_apart_corrupt_case3==-2)

post_2y <- main_ro_allcases1%>% filter(years_apart_corrupt==1
                                       |years_apart_corrupt==2
                                       |years_apart_corrupt_case2==1
                                       |years_apart_corrupt_case2==2
                                       |years_apart_corrupt_case3==1
                                       |years_apart_corrupt_case3==2)

#Mean after - mean before t-test
m2_c<-t.test(post_2y$cri_ro,pre_2y$cri_ro, conf.level = 0.95)

#Filtering out all cases that either have 1 corruption case, 2 cases with minimum 3 year between case1 and case2,
#or three cases with minimum 3 year between case2 and case3
main_ro_allcases1 <- main_ro_allcases%>%
  filter(case_apart3y==1 | case_apart3y_case2n3==1)

temp <- main_ro_allcases%>%filter(is.na(case2))

main_ro_allcases1 <- rbind(main_ro_allcases1, temp)

#3 years before/after treatment
pre_3y <- main_ro_allcases1%>% filter(years_apart_corrupt==-1 
                                      |years_apart_corrupt==-2
                                      |years_apart_corrupt==-3
                                      |years_apart_corrupt_case2==-1
                                      |years_apart_corrupt_case2==-2
                                      |years_apart_corrupt_case2==-3
                                      |years_apart_corrupt_case3==-1
                                      |years_apart_corrupt_case3==-2
                                      |years_apart_corrupt_case3==-3)

post_3y <- main_ro_allcases1%>% filter(years_apart_corrupt==1
                                       |years_apart_corrupt==2
                                       |years_apart_corrupt==3
                                       |years_apart_corrupt_case2==1
                                       |years_apart_corrupt_case2==2
                                       |years_apart_corrupt_case2==3
                                       |years_apart_corrupt_case3==1
                                       |years_apart_corrupt_case3==2
                                       |years_apart_corrupt_case3==3)

#Mean after - mean before t-test
m3_c<-t.test(post_3y$cri_ro,pre_3y$cri_ro, conf.level = 0.95)

#Summary of the t-tests
tab1<-map_df(list(m1_c,m2_c,m3_c), tidy)
tab1[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]



## T-test SB 1,2 and 3 years including 2 and 3 cases------


dfsinglebid=main_ro_allcases%>%
  group_by(months_apart_corrupt,singleb)%>%
  tally()%>%#Count singlebid by months
  filter(!is.na(singleb))%>%#Remove NA
  pivot_wider(names_from = singleb,values_from = n)%>%# Long to wide the singlebid for better mathematical handling
  rename(not_single_bid="0",single_bid="1")%>%rowwise()%>%#Rename to make it clearer
  mutate(sample_size=sum(not_single_bid+single_bid,na.rm = T),#Get sample size for each months
         ratio_singleb=single_bid/sample_size)#%>%# Calculate the ratio of single bid contracts

pre_3y <- dfsinglebid[58:94,]
pre_2y <- dfsinglebid[70:94,]
pre_1y <- dfsinglebid[82:94,]

post_3y <- dfsinglebid[94:106,]
post_2y <- dfsinglebid[94:118,]
post_1y <- dfsinglebid[94:130,]

#Before - after test
#m3_s<-t.test(pre_3y$ratio_singleb,post_3y$ratio_singleb, conf.level = 0.95)
#m2_s<-t.test(pre_2y$ratio_singleb,post_2y$ratio_singleb, conf.level = 0.95)
#m1_s<-t.test(pre_1y$ratio_singleb,post_1y$ratio_singleb, conf.level = 0.95)

#After-before test
m3_s<-t.test(post_3y$ratio_singleb,pre_3y$ratio_singleb, conf.level = 0.95)
m2_s<-t.test(post_2y$ratio_singleb,pre_2y$ratio_singleb, conf.level = 0.95)
m1_s<-t.test(post_1y$ratio_singleb,pre_1y$ratio_singleb, conf.level = 0.95)
m3_s

tab2<-map_df(list(m1_s,m2_s,m3_s), tidy)
tab2[c("estimate", "statistic", "p.value", "conf.low", "conf.high")]
## Regression preparation - continue in STATA --------------

#Write the pre matched data municipalities with 1 corruption case only
write_xlsx(main_ro,path = "~/Downloads\\main_ro.xlsx")

#Write the post matched data (Remember to run the code for either SB og CRI, depending on the DV studied)
#municipalities which include only the first corruption case, for municipalities with more than  1 corruption case
write_xlsx(main_ro_matching_final, path = "~/Downloads\\main_ro_match.xlsx")

#Write the Unmatched data set with all municipalities (With more than one case)
write_xlsx(main_ro_allcases, path = "~/Downloads\\main_ro_allcases.xlsx")

## Regressions descriptive--------------

#Matching with all DV included
#Preparing the data frame
main_ro_matching=main_ro%>%select(tender_id, domestic, time_from_corrupted, contractyear, contractmonth,cri_ro,tender_cpvs,log_price,buyer_buyertype,corrupt_dummy,years_apart_corrupt,buyer_nuts4,buyer_postcode2, municipality, procedure, submission, tendercall, singleb )

#Cleaning 
main_ro_matching<- data.frame(na.omit(main_ro_matching))
main_ro_matching<-main_ro_matching %>% filter(!is.na(cri_ro))

var1<-c("cri_ro","log_price")
var2<-c("cri_ro", "procedure", "submission", "tendercall", "singleb", "tender_id", "years_apart_corrupt", "domestic", "time_from_corrupted", "contractyear", "buyer_nuts4", "municipality"  )

#imbalance(group=main_ro_matching$cri_ro, data=main_ro_matching[var1])
summary(main_ro_matching$log_price)
#Value cuts based on quartile
valuecuts1_0 = c(12.54,13.86,15.09)

#Variable grouping
buyer_buyerType.grp<-list(c("REGIONAL_AUTHORITY", "REGIONAL_AGENCY", "UTILITIES"),c("OTHER"), c("PUBLIC_BODY"), c("NA",NA))

#Compute the coarsened exact matching
mat1_0 <- cem(treatment = "corrupt_dummy",drop = var2, grouping = list(buyer_buyertype= buyer_buyerType.grp), cutpoints = list(log_price=valuecuts1_0), eval.imbalance = F,data = main_ro_matching)
table(mat1_0$matched)

main_ro_matching$aftermatchtreat <- mat1_0$matched
main_ro_matching$aftermatchweight <- mat1_0$w

#Filter out unmatched
main_ro_matching_final <- main_ro_matching %>% filter(aftermatchtreat == TRUE)


# Descriptive statistics of input and output variable in the regression UNMATCHED

d.summary.extended <- main_ro %>%
  select(municipality, procedure, submission, tendercall, singleb, cri_ro, log_price, domestic) %>%
  psych::describe(quant=c(.25,.75)) %>%
  as_tibble(rownames="rowname")  %>%
  print()

d.summary <- d.summary.extended %>%
  select(var=rowname, n, mean, min, q25=Q0.25, median, q75=Q0.75, max, sd) %>%
  print()

xtable(d.summary, type = "latex", file = "descriptiveregression.tex")

# Descriptive statistics of input and output variable in the regression MATCHED
d.summary.extended <- main_ro_matching_final %>%
  select(municipality, procedure, submission, tendercall, singleb, cri_ro, log_price, domestic) %>%
  psych::describe(quant=c(.25,.75)) %>%
  as_tibble(rownames="rowname")  %>%
  print()

d.summary1 <- d.summary.extended %>%
  select(var=rowname, n, mean, min, q25=Q0.25, median, q75=Q0.75, max, sd) %>%
  print()

xtable(d.summary1, type = "latex", file = "descriptiveregression2.tex")

## Political party overview

enforcement_ro$year <- substr(enforcement_ro$date_of_indictment, 1,4)

contingency=enforcement_ro%>%
  group_by(year,political_party)%>%
  tally()%>%spread(political_party,n)



  
